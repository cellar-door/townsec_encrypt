<?php
// $Id$

/**
 * @file
 * Townsend Security Encryption module file.
 *
 * This file includes general functions for Townsend Security Encryption.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tell ctools about our plugins.
 */
function townsec_encrypt_ctools_plugin_directory($module, $plugin) {
  if ($module == 'encrypt') {
    return 'plugins/' . $plugin;
  }
}

function townsec_encrypt_menu(){
    $items = array();

  $items['test/akmtest'] = array(
    'page callback' => 'townsec_encrypt_test',
    'access arguments' => array('administer encrypt'),
  );
  
  return $items;
}

function townsec_encrypt_test(){
  $provider = encrypt_get_key_provider('townsec_akm');
  $settings = $provider['settings'];
  $primencrypt = $settings['primary_server']['akm_encrypt_port'];
  $bkupencrypt = $settings['backup_server']['akm_encrypt_port'];
  $primserver = 'tls://'.$settings['primary_server']['akm_host_server'].':'.$primencrypt;
  $bkupserver = 'tls://'.$settings['backup_server']['akm_backup_server'].':'.$bkupencrypt;
  $keyname = $settings['key_name'];
  $errno = NULL;
  $errstr = NULL;
  //For now we assume Binary
  //$encode = $settings['encode'];
  $primlocal = DRUPAL_ROOT . '/' . $settings['primary_server']['client_cert_and_key_file'];
  $primca = DRUPAL_ROOT . '/' . $settings['primary_server']['ca_cert_file'];
  $bkuplocal = DRUPAL_ROOT . '/' . $settings['backup_server']['client_cert_and_key_file'];
  $bkupca = DRUPAL_ROOT . '/' . $settings['backup_server']['ca_cert_file'];
  
  $op = 'encrypt';
  $text = 'Hello';
  $text = base64_encode($text);

  //Create TLS Connection with provided key locations
  $primopts = array(
    'ssl' => array(
      'cafile' => $primca,
      'capture_peer_cert' => true,
      'local_cert' => $primlocal,
      'verify_peer' => true,
    )
  );
  
  $bkupopts = array(
    'ssl' => array(
      'cafile' => $bkupca,
      'capture_peer_cert' => true,
      'local_cert' => $bkuplocal,
      'verify_peer' => true,
    )
  );
  //Create TLS context
  $primctx = stream_context_create($primopts);
  $bkupctx = stream_context_create($bkupopts);
    
  if($fp = stream_socket_client($primserver, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $primctx)){}
  elseif($fp = stream_socket_client($bkupserver, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $bkupctx)){}
  
  if($fp == false){
    dpm('whoops!');
    return '';
  }
  dpm("I'm trying to " . $op . " with " . $text);
/*
Key Length = 40 (left justify pad on right)
Instance = 24 (leave blank or instance got back)
*/
  if($op == 'encrypt'){
//Generate a random IV to use w/ the encryption
    $iv = user_password(16);
    
    $textcount = sprintf('%05d', strlen($text));
    
    if($textcount < 16){
      $text = sprintf('% -16s', $text);
      $textcount = sprintf('%05d', strlen($text));
    }
    else{
      return '';
    }
    $key = sprintf('% -64s', $keyname);
    
    
    $request = sprintf("000982019YNB64". $textcount . "YNYY" . $iv . "" . $key . "" . "" . $text . "");
                                                       
    fputs($fp, $request);
    $len = fread($fp, 5);
    if($len){
      $return = fread($fp, $len + $textcount);
      
      if($return){
        dpm('i just got back ' . $return);
        $inst = substr($return, 15, 24);
        $coded = substr($return, 39);
        $value = $iv . $inst . $coded;
      }
      
    }
    else{
        return '';
      }
    fclose($fp);
    dpm('the encrypted value is ' . $value);
   $text = $value;
   if($fp = stream_socket_client($primserver, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $primctx)){}
  elseif($fp = stream_socket_client($bkupserver, $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $bkupctx)){}
    
    $iv = substr($text, 0, 16);
    $inst = substr($text, 16, 24);
    $coded = substr($text, 40);
    dpm('the iv to decrypt is ' . $iv . ' with the key instance ' . $inst . ' and the value ' . $coded);
    $textcount = sprintf('%05d', strlen($coded));
    $keypad = sprintf('% -40s', $keyname);
    $key = $keypad . $inst;  
    $decrypt_header = "001012021YNB64" . $textcount . "BINYNYY".$iv.$key;
    $decrypt = sprintf($decrypt_header.$coded);    
    dpm("here's the request " . $decrypt);  
      fputs($fp, $decrypt); 
      $len = fread($fp, 5);
      dpm($len);
      if($len){
        $rsp = fread($fp, $len + $textcount);
        if($rsp){
          dpm('voila! We got ' . $rsp);
          $value = substr($rsp, 39);
          $value = rtrim($value);
          dpm('you looking for... ' .$value);
        }
      }
      else{
        return '';
      }
      fclose($fp);

      return $value;
    }

}

function townsend_akm_errorHandler($errno, $errstr){
  echo"<br />\nerror [$errno] $errstr";
  return false;
}
